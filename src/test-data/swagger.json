{
  "swagger": "2.0",
  "info": {
    "description": "This is a interface definition for the backend of blogging platform",
    "version": "1.0.0",
    "title": "Blogging Platform Backend",
    "contact": {
      "email": "pavol.rajzak@itera.no"
    }
  },
  "host": "url-to-be-defined",
  "basePath": "/v1",
  "tags": [
    {
      "name": "post",
      "description": "A single contribution to your bloggosphere"
    },
    {
      "name": "author",
      "description": "Name of the creator of post"
    },
    {
      "name": "category",
      "description": "A group that defines the topic of post"
    },
    {
      "name": "comment",
      "description": "Reaction to the blog post in written form"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/post": {
      "get": {
        "tags": [
          "post"
        ],
        "summary": "Get list of all posts",
        "description": "Unfiltered list of all posts",
        "operationId": "getPosts",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of all posts",
            "schema": {
              "$ref": "#/definitions/Post"
            }
          }
        }
      },
      "post": {
        "tags": [
          "post"
        ],
        "summary": "Add new post",
        "description": "",
        "operationId": "addPost",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Post object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Post"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "post"
        ],
        "summary": "Update an existing post",
        "description": "",
        "operationId": "updatePost",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Post object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Post"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Post not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/post/findByAuthor": {
      "get": {
        "tags": [
          "post"
        ],
        "summary": "Finds Posts by author",
        "description": "Multiple author values can be provided with comma separated strings",
        "operationId": "findPostsByAuthor",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "author",
            "in": "query",
            "description": "Author IDs that need to be considered for filter",
            "required": true,
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Post"
              }
            }
          },
          "400": {
            "description": "Invalid author name"
          }
        }
      }
    },
    "/post/findByCategory": {
      "get": {
        "tags": [
          "post"
        ],
        "summary": "Finds Posts by categories",
        "description": "Muliple categories can be provided with comma separated strings.",
        "operationId": "findPostsByCategory",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "categories",
            "in": "query",
            "description": "Category IDs to filter by",
            "required": true,
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Post"
              }
            }
          },
          "400": {
            "description": "Invalid category name"
          }
        }
      }
    },
    "/post/{postId}": {
      "get": {
        "tags": [
          "post"
        ],
        "summary": "Find post by ID",
        "description": "Returns a single post",
        "operationId": "getPostById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "ID of post to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Post"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Post not found"
          }
        }
      },
      "delete": {
        "tags": [
          "post"
        ],
        "summary": "Deletes a post",
        "description": "",
        "operationId": "deletePost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "postId",
            "in": "path",
            "description": "Post id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Post not found"
          }
        }
      }
    },
    "/comment/post/{postId}": {
      "get": {
        "tags": [
          "comment"
        ],
        "summary": "Finds comments for post",
        "description": "Returns all comments for post with specific ID",
        "operationId": "getCommentsForPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "postId",
            "description": "Post ID to find comments for",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "404": {
            "description": "Comments not found for post"
          }
        }
      },
      "post": {
        "tags": [
          "comment"
        ],
        "summary": "Create comment for post",
        "description": "Create comment for post with specific ID",
        "operationId": "placeCommentForPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "postId",
            "description": "Post ID to find comments for",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Comment placed for post",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          },
          "400": {
            "description": "Invalid comment for post"
          }
        }
      }
    },
    "/comment/{commentId}": {
      "get": {
        "tags": [
          "comment"
        ],
        "summary": "Find comment by comment ID",
        "operationId": "getCommentById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "ID of comment that needs to be fetched",
            "required": true,
            "type": "integer",
            "maximum": 10,
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Comment not found"
          }
        }
      },
      "delete": {
        "tags": [
          "comment"
        ],
        "summary": "Delete comment by ID",
        "operationId": "deleteComment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "ID of the comment that needs to be deleted",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Comment not found"
          }
        }
      }
    },
    "/category": {
      "get": {
        "tags": [
          "category"
        ],
        "summary": "List all categories available",
        "operationId": "findAllCategories",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Category"
            }
          },
          "404": {
            "description": "No categories found"
          }
        }
      }
    },
    "/author": {
      "get": {
        "tags": [
          "author"
        ],
        "summary": "List all authors",
        "operationId": "getAuthors",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Author"
            }
          },
          "404": {
            "description": "No authors found"
          }
        }
      },
      "post": {
        "tags": [
          "author"
        ],
        "summary": "Create author",
        "operationId": "createAuthor",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created author object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Author"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/author/{username}": {
      "get": {
        "tags": [
          "author"
        ],
        "summary": "Get author by user name",
        "description": "",
        "operationId": "getAuthorByUserName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Author"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "Author not found"
          }
        }
      },
      "put": {
        "tags": [
          "author"
        ],
        "summary": "Update author",
        "operationId": "updateAuthor",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated author object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Author"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "Author not found"
          }
        }
      },
      "delete": {
        "tags": [
          "author"
        ],
        "summary": "Delete author",
        "operationId": "deleteAuthor",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "Author not found"
          }
        }
      }
    }
  },
  "definitions": {
    "Post": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "title": {
          "type": "string"
        },
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "perex": {
          "type": "string",
          "description": "Description of post that will be displayed in list of posts"
        },
        "content": {
          "type": "string",
          "description": "Actual content of the post"
        },
        "author": {
          "$ref": "#/definitions/Author"
        },
        "categories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Category"
          }
        }
      }
    },
    "Category": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Author": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        }
      }
    },
    "Comment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "author": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "postId": {
          "type": "integer"
        }
      }
    }
  }
}